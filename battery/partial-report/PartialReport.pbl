###########################################################
##  Partial Report of Iconic Memory, Version 0.1
##  For use with PEBL 0.08 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Testing Battery
##  2006-02 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##
##
##
## This task is thought to provide early indications for alzheimer's, 
## among other things.
## e.g.,
## Lu, Neuse, Madigan, & Dosher (2005).  fast decay of iconic memory
## in observers with mild cognitive impairments.  PNAS 2006; 102;
## 1797-1802.
##
##
##
###########################################################

define Start(lPar)
{

  gScriptName <- "Partial report procedure"
  ####################################
  ##
  ## Parameters/Variables controlling experiment
  ##

  ##default values.  Override in PartialReport.pbl.par
   
  parpairs <- [["blocks",9],
               ["blocklength",50],
	       ["deltaX",15],
	       ["deltaY",15],
	       ["soa",0],
	       ["soa",116],
	       ["soa",137],
	       ["soa",179],
	       ["soa",326],
	       ["soa",621],
 	       ["soa",1210],
	       ["showgraph",0]]

  gParams <- CreateParameters(parpairs,gParamFile)


  blocks <-gParams.blocks              ## The number of trial blocks
  blocklength <-  gParams.blocklength      ## The number of trials per block

  numtrials <- blocks * blocklength 
	
  ## SOA in ms. These are really chosen to match screen updates, so
  ## there should be a parameter in the future to support that.
  soas <- gParams.soa


  ####################################
  ##
  ## Begin Initialization Procedures.
  ##
  Initialize()




  stimLetters <- ["D","F","J","K"]

  ## Lists storing the actual RT values, along with the presentation time.
  rts     <- []
  delayCond <- []

  deltaX <- gParams.deltaX
  deltaY <- gParams.deltaY

  ##These dictate where the stimuli will appear.
  gPosX <- [-3*deltax, -deltax, deltax,3*deltax, 3*deltax, deltax,-deltax,-3*deltax]
  gPosY <- [deltay, 3*deltay,3*deltay,deltay,-deltay, -3*deltay,-3*deltay,-deltay]


##  We should test computer hardware here.
##  
  
  ##First, test whether the machine can handle this.
  gInstructions.text<-gStrings.inst1

  Show(gInstructions)
  Draw()
  WaitForAnyKeyPress()

  Hide(gInstructions)
  Draw()
#  Wait(500)

  

  ## The delays are pre-generated to make it easier to control things, 
  ## like sequential dependencies, distributions, fixed delays, etc.

  delayseq <- Shuffle(DesignBalancedSampling(soas, numtrials))

  header <- "subnum,blocknum,trial,delay,s1,s2,s3,s4,s5,s6,s7,s8,cueid,cueresp,resp,corr,time"
  gDataFile <- GetNewDataFile(gSubNum,gWin,"partreport","csv",header)


  inst2 <- ReplaceChar(gStrings.inst2,"<BLOCKS>",blocks)
  inst2 <- ReplaceChar(inst2,"<LENGTH>",blocklength)
  
  Instructions(inst2,100,100,gWin,25,gVideoWidth-200,500)

  #####################################
  ## Begin Experiment with Instructions

  Show(gInstructions)
  Draw()	  
  WaitForAnyKeyPress()
  Hide(gInstructions)
#  ShowCursor(0)
  gInstructions.text <- gStrings.break
  Draw()
  blocknum <- 1
  trialnum <- 1
  isis <- []
  accs <- []

  loop(i, delayseq)
   {

     FilePrint_(gDataFile,gSubNum + "," + blocknum + "," + trialnum +",")
     tmp <- ReplaceChar(gStrings.trial,"<I>",trialnum)
     tmp <- ReplaceChar(tmp,"<N>",numtrials)
     gTrialCounter.text <- tmp
     
     corr <- Trial(SampleNWithReplacement(stimLetters,8),i)

    ##Keep track of data after practice block:
    if(blocknum > 1)
     {
         isis <- Append(isis,i)
         accs <- Append(accs,corr)
     } 

    ##pause/break
    if(Mod(trialnum,blocklength) == 0)
     {
       blocknum <- blocknum + 1
       HideComplex(gFixation)
       Show(gInstructions)
       Draw()
       WaitForAnyKeyPress()
       Hide(gInstructions)
       ShowComplex(gFixation)
       Draw()
       Wait(500)
     }
    trialnum <- trialnum + 1
   }

  Draw()

  ####################
  ##Experiment is finished; print out summary stats

  ## 
  ##   First, aggregate accuracy:
  aggdata <- AggregateAcc(isis,accs)

  ##These have the form:
  ## [lastISI, Length(tmpAcc), Mean(tmpAcc),DP(Mean(tmpAcc))])


  loop(i,aggdata)
    {
       DataLog(gSubNum,gParamFile,"partialreport","isi-"+ First(i),Fourth(i))
    }

  if(gParams.showgraph)
  {
    GraphStats(aggdata)
  }


   pooledFile <- FileOpenAppend("data/pr-pooled.csv")
   FilePrint_(pooledfile, gSubNum+","+ TimeStamp() +"," + Round(GetTime()/1000) )



   reportfile <- FileOpenWrite("data/gsubnum/partialreport-report-" + gSubNum + ".txt")
   FilePrint(reportfile,"------------------------------------------------------")
   FilePrint(reportfile," Report for PEBL Partial Report Procedure Version 0.1")
   FilePrint(reportfile, " "+GetPEBLVersion())
   FilePrint(reportfile, " "+TimeStamp())
   FilePrint(reportfile," http://pebl.sf.net")
   FilePrint(reportfile, " Participant Code: " + gSubNum)
   FilePrint(reportfile,"------------------------------------------------------")
   FilePrint(reportfile,"Statistic                 Value")
   FilePrint(reportfile,"------------------------------------------------------")

   FilePrint(reportfile,Format("Number of blocks",28) +blocks)
   FilePrint(reportfile,Format("Trials per blocks",28) +blocklength)

  loop(i,aggdata)
    {
       FilePrint(reportfile, "ISI: "+ First(i)+ "     "+ Fourth(i))
       FilePrint_(pooledFile,","+Fourth(i))
    }
    FilePrint(pooledfile,"")

   FileClose(pooledfile)
   FileClose(reportfile)
   FileClose(gdatafile)

  ##Now, show debriefing info.
  Instructions(gStrings.debrief,100,100,gWin,25,gVideoWidth-200,500)

}


##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{

##Take video screen size from launcher/environment.
#  gVideoWidth <- 1024
#  gVideoHeight <- 768
  gSleepEasy <- 1

  ##Initialize Window, etc.
  gWin <- MakeWindow("white")   

  if(gSubNum+""=="0")
   {
     gSubNum <- GetSubNum(gWin)
   }

  GetStrings(gLanguage)

  ##Hide the cursor here.            
#  ShowCursor(0)

  ##Initialize Font and colors
   gFG <- MakeColor("black")
   bg <- MakeColor("white")
   bg2 <- MakeColor("white")
   

   gInstructionsFont <- MakeFont(gPEBLBaseFont,0,22, gFG,bg2,1)  
   gStimFont         <- MakeFont(gPEBLBaseFontMono, 0,24,gFG,bg,1)       
   
   gFooter <- MakeLabel("Respond using D F J K",gStimFont)
   AddObject(gFooter,gWin)
   Move(gFooter, gVideoWidth/2,gVideoHeight-120)
   

   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 700,400)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-350, gVideoHeight/2-200)
   Hide(gInstructions)

 
   gTrialCounter <- MakeLabel("",gInstructionsFont)
   AddObject(gTrialCounter,gWin)
   Move(gTrialCounter,gVideoWidth/2,100)

   ##Make a 'screen' object to occlude the stimuli. Add it last
   gScreen <- Square(gVideoWidth/2,gVideoHeight/2,400,bg,1)

   ## Make and hide fixation cross 
   gFixation <- MakePlus(gVideoWidth/2,gVideoHeight/2)
   HideComplex(gFixation)

}



#######################################################
##This should be called with the selected 8 stimpairs.
define Trial(letters, delay)
{
    complex <- []
    seq <- Transpose([letters,gPosX,gPosY])

    FilePrint_(gDataFile,delay+ ",")

    loop(i,seq)
    { 
      stimbase <- First(i)
      FilePrint_(gDataFile,stimbase + ",")
      x <- Nth(i,2) + gVideoWidth/2
      y <- Nth(i,3) + gVideoHeight/2
      label <- MakeLabel(stimbase,gStimFont)
      AddObject(label,gWin)
       complex <- Append(complex,label)
      Move(label,x,y)

     }


    Draw()
    

    duration <- 105

    AddObject(gScreen,gWin)
    Hide(gScreen)
    AddComplex(gFixation,gWin)
    ShowComplex(gFixation)
  
    cueID <- RandomDiscrete(8)
    cueX <- Nth(gPosX,cueID)+gVideoWidth/2
    cueY <- Nth(gPosY,cueID)+gVideoHeight/2
    cueResp <- Nth(letters,cueID)

    FilePrint_(gDataFile,cueID+ "," + cueResp + ",")
    cue <- MakeArrow(gVideoWidth/2,gVideoHeight/2,Nth(gPosX,cueID)*.6,Nth(gPosY,cueID)*.6)

    HideComplex(cue)
    if(delay < 10) 
     { 
        ShowComplex(cue)
     }
    Draw()
    Wait(duration)

    Show(gScreen)


    #After the appropriate delay, show the arrow cue:
    Draw()
	Wait(delay)
    ShowComplex(cue)
    Draw()

    ## Collect the response (and measure RT)
    time1 <- GetTime()
    resp <- WaitForListKeyPress(["D","F","J","K"])
    time2 <- GetTime()

    ##See if we were correct.
    corr <- 0
    if(Uppercase(resp) == cueresp)
    {
      corr <- 1
    }
    FilePrint(gDataFile,resp + "," + corr + "," + (time2 - time1))
    ##Clean up after ourselves.
    Hide(gScreen)
    RemoveComplex(complex)
#    RemoveObject(gScreen,gWin)
    RemoveComplex(cue)
    Draw()

    return corr
}


define DrawForMe(delay)	
{
    i <- 0
   while(i < delay)
   {
     Draw()
     i <- i + 1
   }
}



define MakePlus(x,y)
{

  d <- Line(x - 10,y,20,0,gFG)
  e <- Line(x ,y-10,0,20,gFG)

  AddObject(d,gWin)
  AddObject(e,gWin)
  return [d,e]
}


define MakeArrow(xstart, ystart, xend, yend)
{
  ##Draws arrow

  sizeback <- 13 

  theta <- ATan(yend/xend)

   #tangent repeats twice, so we need to determine what the true angle is:
  if(xend > 0)
   {
      theta <- theta + 3.14159
   }

  t1 <- theta +  .3
  t2 <- theta -  .3

  dx1 <-  sizeback * Cos(t1)
  dy1 <-  sizeback * Sin(t1)
  dx2 <-  sizeback * Cos(t2)
  dy2 <-  sizeback * Sin(t2)

  a <- Line(xstart,ystart,xend,yend, gFG)
  b <- Line(xstart+xend,ystart+yend, dx1,dy1, gFG)
  c <- Line(xstart+xend,ystart+yend, dx2,dy2,gFG)

  AddObject(a,gWin)
  AddObject(b,gWin)
  AddObject(c,gWin)
  return [a,b,c]
}

define AggregateAcc(isis, accs)
{
  accX <- SortBy(accs,isis)
  isiX <- Sort(isis)

  trials <- Transpose([isiX,accX])
  stats <- []
  lastISI <- First(isiX)
  tmpACC<-[]

  loop(i,trials)
  {

     ## if the current isi differs from the previous delay,
	 ## we should analyze what is in tmp right now.
     if(First(i) != lastISI)
     {
       ##Add an error trial to make dprime computable:
       if(Mean(tmpAcc)==1)
        {
          tmpAcc <- Append(tmpAcc,0)
        }
       stats <- Append(stats,
                      [lastISI, Length(tmpAcc), Mean(tmpAcc),DP(Mean(tmpAcc))])
       tmpAcc <- []
     }

    if(Mean(tmpAcc)==1)
        {
          tmpAcc <- Append(tmpAcc,0)
        }
 
   tmpAcc <- Append(tmpAcc,Nth(i,2))
   lastISI <- First(i)
  }


  stats <- Append(stats, [lastISI, Length(tmpAcc), Mean(tmpAcc), DP(Mean(tmpAcc))])

  return stats
}



define AddComplex(comp,win)
{
  loop(i, comp)
  {
    AddObject(i,win) 
  }
}

define HideComplex(comp)
{
  loop(i, comp)
  {
    Hide(i) 
  }
}
define ShowComplex(comp)
{
  loop(i, comp)
  {
    Show(i) 
  }
}

define RemoveComplex(comp)
{
  loop(i, comp)
   {
     if(IsList(i))
      {
        RemoveComplex(i)
      } else {
     RemoveObject(i,gWin)
      }
    }
}


define GraphStats(stats)
{
  ## stats are in the form of a list, in which each 
  ## element is isi, #, accuracy.
  young      <-[3.8,3.0,2.65,2.5,1.95,1.6,1.25]
  oldControl <-[2.6,2.1,1.8,1.6,1.45,1.3,1]
  oldMCI     <-[2.4,1.06,1.1,.9,.85,.8,.7]
  scaleX <- .5
  scaleY <- -80
  iX <- 100
  iY <- 500

  data <- Transpose(stats)
  datX <- First(data)
  datY <- Nth(data,4)  #Plot d'

  r1 <-  Rectangle(gVideoWidth/2,gVideoHeight/2,gVideoWidth-100, gVideoHeight-100, MakeColor("white"),1)
  AddObject(r1,gWin)

  ##Add some axes.
  ax <-  Line(iX,iY,1300*scaleX,0,MakeColor("black"))
  ay <-  Line(iX,iY,0,5*scaleY,MakeColor("black"))
  AddObject(ax,gWin)
  AddObject(ay,gWin)

  Draw()
   
  
  
  comp <- []

  ##Make comparison lines.
  comp <- Append(comp,GraphXYLine(datX, young, iX,  iY,scaleX,scaleY,MakeColor("blue"),gWin,1))
  comp <- Append(comp,GraphXYLine(datX, oldControl, iX,  iY,scaleX,scaleY,MakeColor("orange"),gWin,1))
  comp <- Append(comp,GraphXYLine(datX, oldMCI, iX,  iY,scaleX,scaleY,MakeColor("red"),gWin,1))

  ##Graph the data 
  comp <-  Append(comp, GraphXYLine(datX, datY, iX, iY,scaleX,scaleY,MakeColor("darkgreen"),gWin,2))
   
  font <- MakeFont(gPEBLBaseFontMono, 0,14,gFG,MakeColor("white"),1)

  ##Add the x labels
  xlabs <-[0,250,500,750,1000,1250]
  loop(i,xlabs)
   {  
      ll <-MakeLabel(i+"", font)
      AddObject(ll,gWin)
      Move(ll,iX+i*scaleX,520)
      comp <- Append(comp, ll)
   }

  xlabel <- Makelabel("Delay of probe (ms)",font)
  AddObject(xlabel,gWin)
  Move(xlabel, gVideoWidth/2-60,540)

  ##Add the y labels
  ylabs <- [0,.5,1,1.5,2,2.5,3,3.5,4,4.5]
  loop(i,ylabs)
   {  
      ll <-MakeLabel(i+"",font)
      AddObject(ll,gWin)
      Move(ll,iX-20,iY+i*scaleY)
      comp <- Append(comp, ll)
   }

  ylabel <- Makelabel(gStrings.ylab,font)
  AddObject(ylabel,gWin)
  ylabel.rotation <- 90
  Move(ylabel, ix-40, gVideoHeight/2-60)

  
  fontblue <- MakeFont("FreeSans.ttf", 0,14,MakeColor("blue"),MakeColor("white"),1)
  fontorange <- MakeFont("FreeSans.ttf", 0,14,MakeColor("orange"),MakeColor("white"),1)
  fontred <- MakeFont("FreeSans.ttf", 0,14,MakeColor("red"),MakeColor("white"),1)

  legend1 <- Makelabel(gStrings.young,fontblue)
  legend2 <- Makelabel(gStrings.old,fontorange)
  legend3 <- MakeLabel(gStrings.oldimpaired,fontred)

  AddObject(legend1,gWin)
  AddObject(legend2,gWin)
  AddObject(legend3,gWin)
  MoveCorner(legend1,gVideoWidth/2+200,395)
  MoveCorner(legend2,gVideoWidth/2+200,415)
  MoveCorner(legend3,gVideoWidth/2+200,435)

  Draw()
#  WritePNG("partial-"+gSubNum+".png",gWin)
  WaitForAnyKeyPress()
  RemoveObject(r1,gWin) 
  RemoveObject(ax,gWin)
  RemoveObject(ay,gWin)
  RemoveObject(ylabel,gWin)
  RemoveObject(xlabel,gWin)
  RemoveObject(legend1,gWin)
  RemoveObject(legend2,gWin)
  RemoveObject(legend3,gWin)

  RemoveComplex(comp)

  Draw()
}

define GraphXYLine(x,y,iX,iY,scaleX, scaleY, col,parent, type)
{

 
  ##Type determines whether it is a fat, smooth line (type = 1)
  ## or a thin line with data points.                (type = 2)

   
  complex <- [] 
  lastX <- First(x)
  lastY <-First(y)

  point <- 0
  loop(xy, Transpose([x,y]))
   {

     mX <- First(xy)
     mY <- Nth(xy,2)
     posX <- iX + scaleX*mX
     posY <- iY + scaleY*mY
  
     if(type == 2)
      {
        c <- Circle(posX, posY,8,col,1)
        AddObject(c, parent)
        Show(c)
        complex <- Append(complex,c)
      }
    if(point > 0)
     {

       c <-  Line(posX,posY,lastx-posX,lasty-posY,col)
       AddObject(c,parent)
       complex <- Append(complex,c)

      if(type ==1)
       {
         c1 <-  Line(posX,posY+.5,lastx-posX,lasty-posY+.5,col)
         c2 <-  Line(posX,posY-.5,lastx-posX,lasty-posY-.5,col)

         AddObject(c1,parent)
         AddObject(c2,parent)

         complex <- Merge(complex,[c1,c2])
        }


     }

    lastX <- posX
    lastY <- posY
    point <- point + 1
  }

  Draw()
  return complex
}


define DP(acc)
{

   return SDTDPrime(acc,(1-acc)/4)
}




define Instructions(text,x,y,win,fontsize,width,height)
{
   brandcolor <- MakeColor("navy")

    font <- MakeFont(gPEBLBaseFont,0,fontsize,MakeColor("grey30"),
                            MakeColor("white"),0) 
    font2 <- MakeFont(gPEBLBaseFont,0,30,MakeColor("grey90"),
                            MakeColor("white"),0) 
    bgbox <- Rectangle(x + width/2,y+height/2,width+2,height+2,brandcolor,1)
    AddObject(bgbox,win)

    tb <- MakeTextBox(text,font,width,height)
    AddObject(tb,gWin)
    Move(tb,x,y)
   
    next <- Rectangle(gVideoWidth/2,gVideoHeight-250,200,80,brandcolor,1)
    AddObject(next,gWin)
    nexttext <- MakeLabeL("OK",font2)
    AddObject(nexttext,gWin)
    Move(nexttext,next.x,next.y)
    Draw()
    WaitForClickOnTarget([next],[1])
    
}




define DataLog(subnum,round,test,ivname,value)
{
 
  MakeDirectory("data")
  file <-  FileOpenAppend("data/PR-Datalog.csv")
  FilePrint(file,subnum+","+TimeStamp()+","+Round((GetTime()/1000))+","+round+","+test+","+ivname+","+value)
  FileClose(file)
}



define GetStrings(lang)
{

  lang <- Uppercase(lang)
  fname <- "translations/PartialReport.pbl-"+LowerCase(lang)+".csv"

  if(FileExists(fname))
  {
    gStrings <- ReadTranslation(fname,lang)
  } else
  {
    gStrings <- ReadTranslation("translations/PartialReport.pbl-en.csv",lang)
  }

 }
