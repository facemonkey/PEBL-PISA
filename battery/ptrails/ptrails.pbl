##
##   This is a basic version of a 'trail making' task.
##   The goal is to connect the dots.
##
##  Version 0.3; 2013.  Add letter trials, and practice rounds as options.
##
##  Version 0.2, January 2010:  Added crude TSP solver to give
##   shortened paths, similar to original.
##


define Start(p)
{

      gScriptName <- "PEBL Trailmaking Test"
        parpairs <- [["useReitan",0],  ##Whether to use Reitan's points in the mix.

                      ["useShortPath",1], ## Whether to shorten the path so points tend to
                                          ## be adjacent.
		      ["shorteningtries",1],   ##how many attempts do you make to shorten the path?  
		                               ## Default is 1, which is the original way


		      ["numtrials",4], ##total number of trials per condition (A and B)
                      ##if usereitan == 1, 2 of them will be the Reitan configurations

		      ["useLetters",1],  ##Should you also include a letter set?  Note that 
                                         ##this adds a third time through the same problem; this
					 ## time reflected top-bottom.

		      ["doPractice",1],  ##Do a short practice round between each round, using 4 items,
                                         ## to let them see how to do it.
    
		      ["targsize",25],  ##Size in pixels of targets (radius)
		      ["TargclickSize",25], ##Size of click zone; may be smaller or larger
		      ["pointtolerance",2],  # #minimum number of pixels of separation between targets 
                                             ## (soft constraint that will be violated if proper
                                             ## configuration cannot be found)
		      ["NumTargs", 26 ],     #Number of targets
		      ["DrawLines", 1 ],     #Whether to draw lines
		      ["fieldwidth",700],
		      ["fieldheight",500],
		      ["maxanglethresh",2.8] ##maximum angle (in radians) to allow on path.  Make this smaller to make the path jaggier.
                     ]

   gParams <- CreateParameters(parpairs,gParamFile)
   gParams.pathscalethresh <- 2 ##This isn't really used.

#  SeedRng(304)

  gSleepEasy <- 0
  gWatch <- 0  ##for debugging; watch path layout
   
  ##Parameters controlling printable area for dots
  
   fieldWidth <- gParams.fieldwidth
   fieldHeight <- gParams.fieldheight

  gxmin <- gVideoWidth/2 - fieldWidth/2
  gxmax <- gVideoWidth/2 + fieldWidth/2
  gymin <- gVideoHeight/2 - fieldHeight/2
  gymax <- gVideoHeight/2 + fieldHeight/2

  gtol <- gParams.TargSize*2+gParams.pointtolerance     #tolerance, in pixels, between points


  gWin <- MakeWindow()
  if(gSubNum+""=="0")
   {
     gSubNum <- GetSubNum(gWin)
   }

  GetStrings(gLanguage)
  
  gStimColor <- MakeColor("darkblue")
  gAccentColor <- MakeColor("yellow")
  gstimFont <-  MakeFont(gPEBLBaseFontMono,0,18,gAccentColor,gStimColor,1)
  gclickedFont <- MakeFont(gPEBLBaseFontMono,1,18,MakeColor("grey35"),gStimColor,1)

  gFileOut <- GetNewDataFile(gSubNum,gWin,"ptrails","csv",
     "subnum,trial,type,clicks,hits,clicktime,posx,posy,corr,id,rt,rt2")


  gSumFile <- GetNewDataFile(gSubNum,gWin,"ptrails-summary","csv",
              "sub,type,distance,studytime,totaltime,mediantime,targs,clicks,acc")


   tb  <- EasyTextBox(gStrings.inst,20,20,gWin,20,gVideoWidth-40,500)
   Draw()

   gFooter <- EasyLabel("",gVideoWidth/2,gVideoHeight-25,gWin,16)


   ptA <- []
   ptB <- []
   ptC <- []
   tmp <- ""  
   trial <- 1
   Draw()
   while(Length(ptA) < gParams.numtrials)
    {
      tmp <- tmp + "*"
      gFooter.text <- "Initializing ["+Format(tmp,gParams.numtrials)+"]"
      Draw()

      ##create the points first
      pts <- NonOverlapLayout(gxmin, gxmax, gymin, gymax, gtol, gParams.NumTargs)       

      ##Instead of a random path, use the 'shortest' path?:      
      if(gParams.useShortPath)
       {

         mat <- DistMatrix(pts)
	 tours <- []
	 lengths <- []

         ##Try multiple times to shorten the path, to get a more consistent path.
	 ##distance/complexity.
	 loop(i,Sequence(1,gParams.shorteningtries,1))
	 {
	   ##always pick 1-2 as start-end (these are arbitrary anyway)
	    seq <- Merge([1,2],Shuffle(Sequence(3,gParams.numtargs,1)))
	    tour <- GrowPathInsert(seq,pts,mat)


            ##Save a copy of this one so we can have some more complex solutions
	    tourlength <- PathDist(tour,mat)

	    PushOnEnd(tours,tour)
	    PushOnEnd(lengths,tourlength)

            ###
            ##We have a grown the tour.  But to get a more consistent 'shortest' path,
            ##let's go through each element one-at-atime, remove it from the path, and re-add it.
            ##do it in semi-random order:
            loop(position, Sequence(1,Length(tour),1))
               {

	            posID <-  Lookup(position,tour,Sequence(1,Length(tour),1))
 	            tour <-  RemoveSubset(tour,[posID]) ##remove the next point.
		    tour <- InsertPointOnPath(tour,position,pts,mat) ##add it back.     
               }

           ##do it once more in order of the path:
            loop(position, tour)
               {
                    posID <-  Lookup(position,tour,Sequence(1,Length(tour),1))
                    tour <-  RemoveSubset(tour,[posID]) ##remove the next point.
                    tour <- InsertPointOnPath(tour,position,pts,mat) ##add it back.     
               }


	    tourlength <- PathDist(tour,mat)
	    PushOnEnd(tours,tour)
	    PushOnEnd(lengths,tourlength)

	 }

	 ##now, we have shortened the path as much as we need. Pick the best one.
	 tour <- Nth(tours,ArgMin(lengths))


         pts <- SortBy(pts,(Order(tour)))  #re-sort the original points
         tourangles <- GetAngles(pts)   #find angles of the tour. These are
	                                   #compute to range between 0 and pi, with 
					   #pi=3.14 a straight line.  We want to get 
					   #rid of straight lines to some extent.

       }


      

     if(gParams.useLetters)
     {
        ##We need three versions; shuffle randomly so there is no systematic bias.
          ptset <- Shuffle([pts,Flip(pts),FlipVert(pts)])
          ptA <- Append(ptA,First(ptset))
          ptB <- Append(ptB,Second(ptset))
          ptC <- Append(ptC,Third(ptset))
      }else{
         ptA <- Append(ptA,pts)
         ptB <- Append(ptB,Flip(pts))  #Points should be reflected here.

      }

      trial<- trial + 1
    }

   gFooter.text <- "Initialization complete. " + gStrings.begin
    tb.text <- tb.text + CR(2) + gStrings.begin
   Draw()
   WaitForDownClick()   
   Hide(tb)
   Draw()


   if(gParams.UseLetters)
    {
      pts <- FlattenN(Transpose([Shuffle(ptA),Shuffle(ptB),Shuffle(ptC)]),1)
      types <- Flatten(Repeat([1,3,2],gParams.numtrials))

    }else{
      pts  <- FlattenN(Transpose([Shuffle(ptA),Shuffle(ptB)]),1)
      types <- Flatten(Repeat([1,2],gParams.numtrials))
    }

   if(gParams.useReitan) 
   {
     pts <- Merge([ReitanPoints("A"),ReitanPoints("B"),ReitanPoints("B"),ReitanPoints("A")], pts)
     types <- Merge([1,2,1,2],types)
   } 



   trial <- 1
   gHeader <- EasyLabel("",gVideoWidth/2,20,gWin,40)
   typeLabels <- ["numbers","alternating numbers and letters","letters"]




   loop(i,Sequence(1,Length(pts),1))
    {

     ##Do a little practice round.
      if(gParams.DoPractice)
      {
        
        tmppts <- NonOverlapLayout(gVideoWidth/2-100,gVideoWidth/2+100,gVideoHeight/2-100,gVideoHeight/2+100, gtol, 4)
	gHeader.text <-gStrings.practice+Nth(typeLabels,(Nth(types,i)))
	Show(gHeader)
	Draw()
	gTrial <- trial + "P"
        Trial(tmppts,Nth(types,i))
        Hide(gHeader)
      }

      gTrial <- trial



      Trial(Nth(pts,i),Nth(types,i))
      trial <- trial + 1
    }


   tb.text<- gStrings.finish
   Show(tb)
   Draw() 
   WaitForAnyKeyPress()    
}


define ReitanPoints(type)
{
  if(type=="A")
   { 
   pts <- [[503,359],[393,428],[532,460],[530,238],[371,254],
	       [453,305],[361,359],[286,449],[308,515],[347,443],
		   [472,530],[235,551],[284,306],[230,380],[219,81],
		   [290,175],[427,71],[407,191],[551,122],[473,117],
		   [589,69],[592,234],[596,548],[566,349],[547,530]]

   } else {
   ##Canonical points for test B

   pts <- [[382,285],[480,434],[297,480],[368,142],[372,221],
		   [464,344],[416,131],[527,105],[525,305],[536,516],
		   [365,485],[258,533],[312,276],[263,390],[242,112],
		   [266,323],[311,110],[463,104],[575,70],[542,438],
		   [569,555],[221,558],[220,368],[243,497],[217,80]]
   }
  return pts
}
  
define Trial(pts,type)
{

  num <- Length(pts)
  if(type==1)
  { 
    ##Numbers!!!
    stim <- Sequence(1,num,1)

  } elseif(type==2) {

    nums <- Sequence(1,26,1)
    lets <- ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    stim <- SubList(Flatten(Transpose([nums, lets])),1,num)
  } elseif(type==3){

    stim <-SubList( ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],1,num)

  }

   
  if(type==1)
    {
     msg <-     gStrings.type1

    } elseif(type==2){
     msg <- gStrings.type2
    }else{
     msg <- gStrings.type3
   }

   gFooter.text <- gStrings.begin + msg
   Draw()
   WaitForDownClick()
   gFooter.text <- msg

   stimObjects <-  PlotTargets(pts,gParams.TargSize,stim)
   stimLines <- []
   Draw()
   starttime <- GetTime()

   hits <- 0
   clicks <- 0
   remaining <- pts
   next <- First(pts)
   last <- next
   ##Keep track of last click and last successful click
   lastsucc <- GetTime()
   lastclick <- lastsucc

   dist <- 0    #Keep track of the distance
   times <- []  #keep track of individual times

   studytime <- 0

   while(Length(remaining)>0)
    {
      wait <- 1

      ##Repeat this loop until we get a down click
      while(wait)
       {
         pos <- WaitForDownClick()
         if(Nth(pos,4)=="<pressed>")
          {
            wait <- 0
            clicktime <- GetTime()
            clicks <- clicks + 1
          }
       }

    ##The first click finishes 'study', so reset start time.
    if(studytime == 0)
     {
       studytime <- clicktime - starttime
       starttime <- clicktime
     }
   ##Did we click on a point?
   id <- ClickedOn(pos,pts)
   if(id > 0)
     {
       if(ClickedOn(pos,[next]))
         {

   
          RemoveObjects(stimLines,gWin)
          RemoveObjects(stimObjects,gWin)


           corr <- 1 

           if(gParams.DrawLines)
           {

                x0 <- First(last)
                y0 <- Nth(last,2)
                x1 <- First(next)
                y1 <- Nth(next,2)

                l <- ThickLine(x0,y0,x1,y1,5,gStimColor)


        #        l <- Line(First(last),Nth(last,2),xdiff,ydiff,gStimColor)

                stimLines <- Append(stimLines,l)
                AddObjects(stimLines,gWin)

           }
           AddObjects(stimObjects,gWin)
           Draw()
           ## Increment the total distance travelled
           dist <- dist + Dist(last,next)
 
           ## keep track of the time to make the hit.
           times <- Append(times,clicktime - lastsucc)

           if(Length(remaining)==1)
            {
              remaining <- [] 
     
            } else {
              remaining <- SubList(remaining,2,Length(remaining))
              last <- next
              next <- First(remaining)           
            }

           hits <- hits + 1

          ##Get the label and change its font.
           x <- Nth(Nth(stimObjects,id),2)
           x.Font <- gclickedfont
           Draw()
         } else {
           corr <- 0 
         }

        FilePrint(gFileOut,gSubNum +  ","+ gtrial + "," +type+","+ clicks + ","  + hits + "," + clicktime + "," + First(pos) + "," +   Nth(pos, 2) + "," +  corr + "," + id + "," + (clicktime - lastclick) + ","+ (clicktime-lastsucc))
        lastclick <- clicktime
        if(corr)
          {
            lastsucc <- clicktime
          }

     }


  }

   FilePrint(gSumFile,gSubNum + "," + type+ "," + dist + "," + studytime + "," + (clicktime - starttime) + ","  + Median(times) +   "," + hits + "," +clicks + "," + hits/clicks )

#   WritePNG("solution.png",gWin)
   RemoveObjects(stimObjects,gWin)
   RemoveObjects(stimLines,gWin)
 
}

define ClickedOn(pos,targets)
{
   click <- SubList(pos,1,2)
   index <- 1
   id <- 0
   loop(i,targets)
   {
      if(Dist(click,i)<=gParams.TargClickSize)
      {
         id <- index
         break          
      }
    index <- index + 1
   }
    return id
}
 

define PlotTargets(pts,size,labels)
{

  tmp <- Transpose([pts,labels])

  comp <- []
  start <- 1  
  loop(i,tmp)
   {
      pos <- First(i)
      label <- Nth(i,2)
  
      comp <- Append(comp,  AddTarget(pos,label,size,start))
      start <- 0
   }
 return comp
}


## This was moved to Graphics.pbl and is not used here
define MakePoints(xmin, xmax, ymin, ymax, tol, num)
{

   ##should you watch the points evolve?

   

   ##Note that it is possible to arrange the situation 
   ## so that the distribution will never be satisfied.  So, lets
   ## set up a 'limit' at which point we give up and return the best
   ## we have so far.

   limit <- 100
 

  ## First, just initialize num points.
  pts <- []
  i <- 1
  while(i <= num)
   {

     x <- xmin + Random()*(xmax-xmin)
     y <- ymin + Random()*(ymax-ymin)
     pts <- Append(pts, [x,y])
     i <- i + 1
   }

  #Now, check for the minimum distance between two points.
   tries <- 1
   minpair <-  GetMinDist(pts)


   ##Move one point at a time
   while(First(minpair) < tol and tries < limit)
   {
     if(gWatch) 
     {

      xxxobj <- PlotTargets(pts,tol/2,Sequence(1,num,1))
      Draw()
     }

     pt1id <- Nth(minpair,2)
     pt2id <- Nth(minpair,3)

	
     pt1 <- Nth(pts,pt1id)
     pt2 <- Nth(pts,pt2id)

     if(gWatch)
      {
       line <- Line(First(pt1),Second(pt1),  
                     First(pt2)-First(pt1),
  		     Second(pt2)-Second(pt1), MakeColor("orange"))
       AddObject(line,gWin)
       Draw()

      }

    #resample the 'bad' points

     ##Half the time, try to move a little bit away from 
     ##the closest. Otherwise, do it randomly.

     if(0)
     {

       ##This doesn't seem to work.
       lastpt <- pt1       
       pt1 <- [-1,-1]
       while((First(lastpt) > xmin) and (First(lastpt)<xmax) and 
              (Second(lastpt) > ymin) and (Second(lastpt)<ymax))
         {
           #Resampling
           dist <- Random() * tol
           diff <- [First(pt2) - First(pt1),Second(pt2)-Second(pt1)]     
           pt1 <- VecSum(pt2,VecTimes(diff,[dist,dist]))
           if(gWatch)
           {
	     Print("watch this")
           }
         }

        


     } else{
 
     pt1 <-   [ xmin + Random()*(xmax-xmin),
                  ymin + Random()*(ymax-ymin) ]

    }
   #   pt2 <-   [ xmin + Random()*(xmax-xmin),
   #                ymin + Random()*(ymax-ymin) ]


     ##Reassemble pts
     tmp <- RemoveSubset(pts,[pt1id])

     ##See if this configuration is an improvement
     testpts <- Merge(tmp,[pt1])
     minpairtest <-  GetMinDist(testpts)

     ##If we've made an improvement, use it, otherwise abandon it.
     if(First(minpairtest) >= First(minpair))
     {
        minpair <- minpairtest
        pts <- testpts
     }
     tries <- tries + 1
     if(gWatch)
     {
         RemoveObjects(xxxobj,gWin)
         RemoveObject(line,gWin)
         xxxobj <- PlotTargets(pts,tol/2,Sequence(1,num,1))
         Draw()
         RemoveObjects(xxxobj,gWin)


     }

  
   }


  
  return Shuffle(pts)
}


define GetMinDist(pts)
{
   len <- Length(pts)
   index1 <- 1
   mindist <- Dist(First(pts),Nth(pts,2))
   id1 <- 1
   id2 <- 2
 
   loop(i,pts)
   {
     pt1 <- i
     index2 <- index1 + 1
 

     if(index2 <= len)
      {
      rest <- SubList(pts,index2, Length(pts))
      loop(j, rest)
       { 
        d <- Dist(i,j)

        if(d < mindist)
        {
          mindist <- d
          id1 <- index1
          id2 <- index2
        }

        index2 <- index2 + 1
      }
      }
     index1  <- index1 + 1
   }

   return [mindist,id1,id2]
}


define AddTarget(pos,letter,size,type)
{

    ##if type== 1, add an accented circle around the target.

   x <- First(pos)
   y <- Nth(pos,2)
   
 
   lab <- MakeLabel(letter+"",gstimFont)

   if(type)
    {
       crc1 <- Circle(x,y,size+4,gAccentColor,1)
       crc2 <- Circle(x,y,size,gStimColor,1)
       crc1.aa <- 1
       crc2.aa <- 1
       AddObject(crc1,gWin)
       AddObject(crc2,gWin)
       AddObject(lab,gWin)       
       ret <- [[crc1,crc2],lab]
    } else { 

       crc <- Circle(x,y,size,gStimColor,1)
       crc.aa <- 1
       AddObject(crc,gWin)
       AddObject(lab,gWin)
       ret <- [crc,lab]
    }

   Move(lab,x,y)
   
   return ret
}



define AddObjects(list,win)
{
   loop(i,Flatten(list))
   { 
     AddObject(i,win)
   }
}

define VecTimes(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) * Nth(i,2))
   }
  return out
}

define VecSum(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) + Nth(i,2))
   }
  return out
}

define Dist(a,b)
{
  return Sqrt((First(a)- First(b))^2 + (Nth(a,2) - Nth(b,2))^2)
}




##  This function takes a list of anything, and a list of indexes
##  specifying the items to extract from the list.  The indexes can
##  be in any order, but the extracted list will be in the order 
##  of the original list.  Items that are not numbers less than or 
##  equal to the length of the list will be ignored.
define RemoveSubset(list, items)
{
   #Check the arguments to insure they are the proper type
    if(not IsList(list))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}
    if(not IsList(items))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}


    returnList <- []      #Make an initial blank list to return
    index <- 1            #keep track of the index
    loop(i, list)
    {
	#If the index is in the items list, add it to the return list
	if(not IsMember(index, items))
	{
	    returnList <- Append(returnList, i)
	}
	index <- index + 1
    }

    return returnList
}

define WaitForDownClick()
{
   continue <- 1
   while(continue) 
    {
	x <- WaitForMouseButton()
        if(Nth(x,4) == "<pressed>")
        { 
         continue <- 0
        }
    }
     return x
}
 


define ShortenPathNN(tour,pts,mat)
{

 ##nearest-neighbor method.
  cur <- First(tour)
  toura <- [cur]
  rest <- Rest(tour)
   while(Length(rest)>1)
    {
 
     distances <- ExtractListItems(Nth(mat,cur),rest)
     ##find closest neighbor.
     order <- Sortby(rest, distances)
     cur <- First(order)
     rest<- Rest(order)
     toura <- Append(toura,  cur)

    }

   return Merge(toura,rest)
}


##this will shorten a path to be more regular.  Note that this makes
##the PEBL version somewhat easier than the Reitan version, apparently.
define GrowPathInsert(tour,pts,mat)
{

  if(gWatch)
   {
      xxxobj <- PlotTargets(pts,gParams.TargSize,tour)
      Draw()
   }

  toura <- SubList(tour,1,2)
  rest <- SubList(tour,3,Length(tour))
    
   loop(next, rest)
      {
         tourA <- InsertPointOnPath(tourA,next,pts,mat)
      }



   if(gWatch) 
   {
    xxx2 <-  DrawPath(toura,pts)
    Draw()

    RemoveObjects(xxx2,gWin)
    RemoveObjects(xxxobj,gWin)
#    WaitForDownClick()  
    }

  return   toura
}

##inserts a single point (newpoint) to the closest location on a path.
define InsertPointOnPath(path,newpoint,pts,mat)
{
     ##path and newpoint are point indices



       ##For the next item, look at the cost incurred by adding it to
       ##each of the parts.
      if(gWatch)
       {

        ptssub <- Subset(pts,path)
        xxx2 <-  DrawPath(path,ptssub)
        Draw()
     
        WaitForDownClick()  
        RemoveObjects(xxx2,gWin)
       }
  

      links <- Transpose([Rotate(path,-1),path, Rotate(path,1)])
      dists <- []
      angles <- []


     loop(i,links)
      {

        ## compute the cost to inserting between the two elements of i
        cost <- M(mat,Second(i),newpoint) + M(mat,newpoint,Third(i)) - M(mat,Second(i),Third(i))

	angle <- GetAngle3(Nth(pts,First(i)),Nth(pts,Second(i)),Nth(pts,Third(i)))
        PushOnEnd(dists,cost)
	PushOnEnd(angles,angle)
      }

       ##we went through all the links. We have two measures; least cost and max angle. 
       ##let's add it to the least-cost position that has an appropriate angle.
       d2 <- SortBy(Sequence(1,Length(path),1),dists)
       ##The first element of d2 gives the location to insert
       path <- Insert(path, newpoint,First(d2))


  return path
}


##this will shorten a path to be more regular.  Note that this makes
##the PEBL version somewhat easier than the Reitan version, apparently.
define LengthenPath(tour,pts,mat,scalethresh)
{

  ids <- Sequence(3,Length(tour)-1,1)

  if(gWatch)
   {
      xxxobj <- PlotTargets(pts,gParams.TargSize,tour)
      Draw()
   }

   ##minlength is the length of the shortest path
   pathlength <- PathDist(tour,mat)
   thresh <- scalethresh * pathlength
   while(pathlength<thresh)
   {
     id2 <- Sample(ids)
     id1 <- id2-1


     ptA <- Nth(pts,Nth(tour,id1-1))
     ptB <- Nth(pts,Nth(tour,id1))
     ptC <- Nth(pts,Nth(tour,id2))
     ptD <- Nth(pts,Nth(tour,id2+1))

     ##right now, the path goes ABCD. 
     ##we want to go ACBD, but only if there are no crossings involved.
     ##at least, AC should not cross BD.


    if(not SegmentsIntersect(First(ptA),Second(ptA),
                             First(ptC),Second(ptC),
			     First(ptB),Second(ptB),
			     First(ptD),Second(ptD)))
     {

     tmp <- Nth(tour,id1)
     SetElement(tour,id1,Nth(tour,id2))
     SetElement(tour,id2,tmp)
     pathlength <- PathDist(tour,mat)    

     if(gWatch)
      {
        xxx2 <-  DrawPath(tour,pts)
        Draw()
      }
     }
   }
  return tour
}


define DrawPath(path,pts)
{


      ##Path is a sequence of targets
      ##pts is a list of [x,y] points

      pts2 <- SortBy(pts,Order(path))
      last <- Last(pts2)
      stimObjects <- [] 


      loop(i,pts2)
       {

        x0 <- First(last)
        y0 <- Nth(last,2)

        xdiff <- First(i) - x0
        ydiff <- Nth(i,2) - y0
        l <- Line(First(last),Nth(last,2),xdiff,ydiff,gStimColor)
#        l <- ThickLine(First(last),Second(last),x0,y0,4,gStimColor)
        AddObject(l,gWin)
        stimObjects <- Append(stimObjects,l)
        last <- i
       }

   if(gWatch)
   { 

     Draw()
#     Wait(250)
   }
  return stimObjects
}


define Insert(list, item, pos)
{ 
   if(pos == 0)
    { 
      new <- Merge([item],list)
    } elseif(pos >= Length(list))
    {
      new <- Append(list, item)    
 
    }else {

      new <- FlattenN([SubList(list,1,pos),
                      [item], 
                      SubList(list,pos+1,Length(list))],1)
   }

  return new
}


define Rest(list)
{
  return SubList(list,2,Length(list))
}




##This is like mod, but 1-based instead of 0-based
define Mod1(num,mod)
{
   tmp <- Mod(num, mod)
   if(tmp==0)
     {
       tmp <- mod
     }
   return tmp
}



define DistMatrix(pts)
{
   mat <- []
   loop(i,pts)
   {

     line <- []
     loop(j, pts)
     {
       line <- Append(line, Dist(i,j)) 

     }

	 mat <- Append(mat,line)
   }

  return mat
}


##Finds the distance of a path (not a circuit)
define PathDist(path,dMat)
{
    dist <- 0
    ptA <- First(path)
    loop(i, path)
    {
       dist <- dist + M(dMat,ptA,i)
       ptA <- i
    }
   return dist

}

define TourDist(tour, dMat)
{
  return  PathDist(tour,dMat) + M(dMat,First(tour), Last(tour))
}


## Get pairwise value in a matrix.
##
define M(matrix, a,b)
  {
   return Nth(Nth(matrix,a),b)
  }


define Flip(pts)
{
  newpts <- []
  loop(i, pts)
  {
    newpts <- Append(newpts, [gxmax - (First(i)-gxmin),Second(i)])
  }
  return newpts
}

define FlipVert(pts)
{
  newpts <- []
  loop(i, pts)
  {
    newpts <- Append(newpts, [First(i), gymax - (Second(i)-gymin)])
  }
  return newpts
}


define ArgMin(list)
{
   indexes <- Sequence(1,Length(list),1)
   return Nth(SortBy(indexes, list), Length(list))
}

define ArgMin(list)
{
   indexes <- Sequence(1,Length(list),1)
   return First(SortBy(indexes, list))
}



define GetAngles(path)
{
   angles <- []
   tmp1 <- Sublist(path,1,Length(path)-2)
   tmp2 <- SubList(path,2,Length(path)-1)
   tmp3 <- SubList(path,3,Length(path))
   pp <- Transpose([tmp1,tmp2,tmp3])
   loop(i,pp)
   {
      ##compute the angle of p1p2p3
      angle <- GetAngle3(First(i),Second(i),Third(i))
      PushOnEnd(angles,angle)
   }

 return angles
}




define GetStrings(lang)
{

  lang <- Uppercase(lang)
  fname <- "translations/ptrails.pbl-"+LowerCase(lang)+".csv"

  if(FileExists(fname))
  {
    gStrings <- ReadTranslation(fname,lang)
  } else
  {
    gStrings <- ReadTranslation("translations/ptrails.pbl-en.csv",lang)
  }

 }
