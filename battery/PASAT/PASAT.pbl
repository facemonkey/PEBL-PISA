
define Start(p)
{

   gScriptName <- "PEBL PASAT"
   
   gWin <- MakeWindow("black")

   parpairs <- [["isi", 3000],
                ["trialsperround",20],  ##20 3-sec rounds = 1 minute

                ["dopractice",1],
                ["practiceISI",5000],
		["practiceTrials",10],

	        ["doAUdio",1],  
                ["dovisual",1],

	        ["rounds",2],  ##number of blocks/rounds
	        ["max",20]  ##largest number to use
                ]


        gParams <- CreateParameters(parpairs,gParamFile)

  if(gSubNum+""=="0")
  {
     gSubNum <- GetSubNum(gWin)
  }


  GetStrings(gLanguage)


  soundstem <- ["01","02","03","04","05","06","07","08","09","10",
                  "11","12","13","14","15","16","17","18","19","20"]
            
   sounds <- []
   loop(i, soundstem)
   {
     tmp <- LoadSound("audio/"+i+".wav")
     PushOnEnd(sounds,tmp)
    }  


   MessageBox(gStrings.inst1,gWin)
	## Make data files   
   header <- "subnum,block,trial,practice,cue,topbottom,targdir,flankercoherence,flankerdir,time0,delay,resp,corr,rt"

   gFileOut <- GetNewDataFile(gSubNum,gWin,"PASAT","csv",header)
   gReport <- GetNewDataFile(gSubNum,gWin,"PASAT-report","txt","")

   blocks <- Sequence(1,gParams.rounds,1)
   if(gParams.dopractice)
   {
     blocks <- Merge(["P"],blocks)
   }

    stim <- EasyLabel("",gVideoWidth/2,gVideoHeight/2-100,gWin,80)
    footer <- Easylabel("",gVideoWidth/2,gVideoHeight-150,gWin,20)
    footer.text <- gStrings.footer


    feedback <- EasyLabel(gStrings.correcthead + "0/0",gVideoWidth/2+300,gVideoheight/2-100,gWin,20)

    width <- Max([3,Ceiling(gparams.max/2)])
    height <- Ceiling(gParams.max/width)
    layout <-  LayoutGrid(100,gVideoWidth-100,gVideoHeight/2,gVideoheight/2+200, height,width,0)

    layout <- SubList(layout,1,gParams.max)
    
    responses <- []
    backs <- []
    loop(i,Sequence(1,gParams.max,1))
     {
      
        xy <-Nth(layout,i)
        out <-  Easylabel(i+"",First(xy),Second(xy),gWin,22)
	back <- Rectangle(First(xy),Second(xy),50,40,MakeColor("white"),0)
	AddObject(back,gWin)
	PushOnEnd(backs,back)
	PushOnEnd(responses,out)
     }

    blockdata <- []

    trial <- 1
   
   loop(block,blocks)
   {

     feedbacksum <- 0
     feedbackcount <- 0
     doubles <- 0

     feedback.text <- gStrings.correcthead + "0/0"
     ##make the stimulus sequence.
     ##sum must be less than max..reducing this can change the difficulty.
       if(block=="P")
       {
        isi <- gParams.practiceISI
	trials <- gParams.practiceTrials
       }else{
        isi <- gParams.ISI
	trials <- gParams.trialsperround
       }


     stimuli <- MakeStim(gParams.max,trials)

     stim.text <- "0"  ##start with a 0, so first number is correct.
     Draw()
     Wait(2000)

     blocktrial <- 1
     lastcorrect <- 0
     loop(i,stimuli)
     {


       trialend <- GetTime()+isi

       if(gParams.doaudio)
       {
          PlayBackground(Nth(sounds,First(i)))
       }
       
       if(gParams.doVisual)
       {
         stim.text <- First(i)
       }else{
         stim.text <- "+"
       }
 
       Draw()
       time0 <- GetTime()



       resp <- WaitForClickOntargetWithTimeout(backs,Sequence(1,gparams.max,1),isi)
       time1 <- GetTime()

       if(resp=="<timeout>")
       {

        correct <- 0
	resp <- "X"	
       }else{

          correct <- (resp+"")==(Second(i)+"")
       }

       if(correct)
       {
        stim.text <- gStrings.correct

       }else{
        stim.text <- gStrings.incorrect
       }


       if(blocktrial > 1)
       {
        feedbackcount <- feedbackcount + 1
        feedbacksum <- feedbacksum+ correct
        feedback.text <- gStrings.correcthead + feedbacksum+"/"+feedbackcount
       }

       double <- lastcorrect and correct

       FilePrint(gFileOut,gSubNum+","+ block + ","+ trial + "," +blocktrial + ","+isi +","+ First(i) + ","+
                         Second(i) + "," + resp + "," + correct + "," +
			 lastcorrect + ","+ double + ","+
                          feedbackcount + "," + feedbacksum + ","+
                          time0 + "," + (time1-time0))

        lastcorrect <- correct
       trial <- trial + 1
       blocktrial <- blocktrial + 1
       doubles <- doubles + double
       Draw()       
       Wait(Max([0,trialend-GetTime()])) 
    }

     PushOnEnd(blockdata, [block,feedbackcount, feedbacksum,doubles])
     if(block=="P")
     {
      MessageBox(gSTrings.practicecomplete,gWin)
     }else{
      MessageBox(gStrinsg.break,gWin)
     }
   }  
  
  FilePrint(gReport,"PEBL PASAT TEST")
  FilePrint(gReport,GetPEBLVersion())
  FilePrint(gReport,Timestamp())
  FilePrint(gReport,"Participant code: " +gSubNum)
  FilePrint(gReport, "Runtime parameters:" )
  tmp <- GetPropertyList(gParams)
  loop(i,tmp)
  {
   FilePrint(gReport,Format(i ,25)  +":      "+  GetProperty(gParams,i))
  }
  FilePrint(gReport,"Results:" )
  FilePrint(gReport,"---------------------------------------")
  FilePrint(gReport,"Round    Number    Correct   Doublets")
  FilePrint(gReport,"----------------------------------------")
  loop(line,blockdata)
  {
    FilePrint(gReport, First(line)+"         " +Second(line)+ "          "  + Third(line) + "          " + Fourth(line) )
  }

  FilePrint(gReport,"----------------------------------------")
  MessageBox(gStrings.debrief,gWin)
   ##could be recorded into a report here:


}

define MakeStim(max,length)
{
    
  ##maximum start should be 2 less than max, so there is some ambiguity.
  current <- RandomDiscrete(max-2)
  
  seq <-[current]       ##
  answers <- [current]  ##  make first answer = first number, so it is +0

  while(Length(seq)<length)
   {
     prev <- current
     current <- RandomDiscrete(max-prev)
     PushOnEnd(seq,current)
     PushOnEnd(answers,prev+current)     
   }
 return Transpose([seq,answers])
}


define LayoutGrid(xmin,xmax,ymin,ymax, tall, wide, horvert)
 {
     xskip <- (xmax-xmin)/(wide+1)
     yskip <- (ymax-ymin)/(tall+1)

     pts <- []

     if(horvert == 1)
      {
        x <- xmin+xskip
       loop(i,Sequence(1,wide,1))
        { 
          y <- ymin+yskip
         loop(j,Sequence(1,tall,1))
          {
             pts <- Append(pts, [x,y])
             y <- y + yskip
          }
          x <- x + xskip
        }
      }else {

       y <- ymin+yskip
       loop(i,Sequence(1,tall,1))
        { 
          x <- xmin+xskip
         loop(j,Sequence(1,wide,1))
          {

             pts <- Append(pts, [x,y])
             x <- x + xskip

          }
        y <- y + yskip       
     }}

   return pts
  }




define GetStrings(lang)
{

  lang <- Uppercase(lang)
  fname <- "translations/PASAT.pbl-"+LowerCase(lang)+".csv"

  if(FileExists(fname))
  {
    gStrings <- ReadTranslation(fname,lang)
  } else
  {
    gStrings <- ReadTranslation("translations/PASAT.pbl-en.csv",lang)
  }

 }
