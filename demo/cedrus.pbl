define Start(p)
{


  ##For cedrus box, 
  ##  1-2 are up for RB mode
  ##  3 is baud rate 19200=down, 9600=up
  
  ## 1-2 are down for XID mode
  ##  3 is baud; down = 115K, up = 9600

 
  ## 1-down 2-up is ASCII, 
  ## 3 is baud,  down = 19200, up = 9600 
  ## It will just give you keydown events.


  ## 1-up 2-down is PST mode (probably not useful in PEBL)
  ##xid mode:


##  Basic 6-byte protocol:
##  byte 1: k
##  byte 2: bits 0-3 stor port number
##  byte 2: bits 4: action flag.  If set, the button has been pressed;
##  if clear, it has been released.
##  byte 2: bits 5-7 indicate which button was pressed.
##  bytes 3-6: reaction time timer.

## Set XID Protocol:
##text commands the cedrus supposedly recognizes:
## c10    Sets the device protocol to XID mode
## Set RB Series Protocol
## c11    Sets the device protocol to RB Series mode
## Set PST Protocol
## c12    Sets the device protocol to PST mode.
## Note: This protocol does not work in SV-1.
## Set ASCII Protocol
## c13    Sets the device protocol to ASCII mode


## Get Protocol
## _c1    The XID device sends back _xid followed
##        by a byte between 0 and 3 that
##        indicates the current protocol

   ## _d1 get product name
   ## _d2 get product id
   ## _d3 reports model number
   ## _d4  major firmware revision
   ## _d5 minor firmware
   ## 


   ## e1 reset base timer
   ## e3 gets value of device base timer???
   ## e5  reset RT timer


   ## 
   ## a10 (???)


    gWin <- MakeWindow("black")



	gBaseX <- gVideoWidth/2
	gBaseY <- gVideoHeight/2-100

    lab <- Easylabel("Cedrus RB-834 Response Pad Test. Press four large keys at the same time to exit",gBaseX,20,gWin,18)

    buttonstate <- EasyLabel("Button State: [UNKNOWN]",gBaseX, 80,gWin,18)


	
	buttoncolor <- MakeColor("grey60")
    button1 <- Rectangle(gBaseX-75,gBaseY-80,100,50,buttoncolor,1)
    button2 <- Rectangle(gBaseX+75,gBaseY-80,100,50,buttoncolor,1)
    button3 <- Rectangle(gBaseX-75,gBaseY+80,100,50,buttoncolor,1)
    button4 <- Rectangle(gBaseX+75,gBaseY+80,100,50,buttoncolor,1)

    button5 <- Rectangle(gBaseX-200,gBaseY-80,60,25,buttoncolor,1)
    button6 <- Rectangle(gBaseX+200,gBaseY-80,60,25,buttoncolor,1)
    button7 <- Rectangle(gBaseX-200,gBaseY,60,25,buttoncolor,1)
    button0 <- Rectangle(gBaseX+200,gBaseY,60,25,buttoncolor,1)

	AddObject(button1,gWin)
	AddObject(button2,gWin)
	AddObject(button3,gWin)
	AddObject(button4,gWin)

	AddObject(button5,gWin)
	AddObject(button6,gWin)
	AddObject(button7,gWin)
	AddObject(button0,gWin)

    ##Add some indicator text
    gIndicator <- EasyLabel("",0,0,gWin,12)

    gButtons <- [button0,button1,button2,button3,button4,
	             button5,button6,button7]

    gMsg <-EasyTextBox("",50,gBaseY+120,gWin,14,
                      gVideoWidth-100,gVideoHeight-gBaseY-150)
    gMsg.linewrap <- 0
    Draw()


    

   ##use the following for linux:
   Print(GetSystemType())
   if(GetSystemType()=="LINUX")
    {
     out <- OpenComPort(16,9600)
    }elseif(GetSystemType()=="WINDOWS")
    {
     ##use the following for Windows
     out <- OpenComPort(13,9600)
    }else { 
     SignalFatalError("Cedrus buttonbox unavailable on " +GetSystemType())
    }

   GetCedrusString(out) ##flush whatever is in the queue. 

  ##Setting x mode
   
   ##Get protocol:
   Print(SendCedrus(out,"_c1"))
   Print("Protocol:         ["+GetCedrusString(out)+"]")
#  SendCedrus(out,"c10")    
  SendCedrus(out,"_d1")
  Print("Product name:      ["+GetCedrusString(out)+"]")

  SendCedrus(out,"_d2")
  Print("Product id:        ["+GetCedrusList(out,1)+"]")

  SendCedrus(out,"_d3")
  Print("Model number:      ["+GetCedrusList(out,1)+"]")
  SendCedrus(out,"_d4")
  Print("Major firmware:    ["+GetCedrusList(out,1)+"]")
  SendCedrus(out,"_d5")
  Print("Minor firmware:    ["+GetCedrusList(out,1)+"]")


  GetCedrusString(out) ##flush whatever is in the queue.
  Print("Resetting base timer value: ")
  SendCedrus(out,"e1")
  gBaseTime <- GetTime()
  SendCedrus(out,"e5")
  result <-   GetCedrusString(out) ##flush whatever is in the queue.
  Print("-----:"+result)

  SendCedrus(out,"e3")  ##Get current time
  basetime <- GetCedrusList(out,6)
  basetime2 <-  BitsToTimer(SubList(basetime,3,6))
  Print("base timer value: "+ basetime2)


   Print("**************************************")
   Print("starting to monitor keypad")
#   MonitorCedrus(out,5000)
   

   ##To exit, push down buttons 1 2 3 4 without unpushing
   down1 <- 0
   down2 <- 0
   down3 <- 0
   down4 <- 0
   down5 <- 0
   down6 <- 0
   down7 <- 0
   down0 <- 0


   cont <- 1
   while(cont)
   {

    ##Any legal key up/down is considered:
    resp <- WaitForCedrusResponse(out,[1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0],
                             [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0])


    #Flash the event on-screen    
    DisplayEvent(resp)


    ##keep track of complete keystate, to check for exit condition.
    if(Third(resp)==1)
	   {
        down1 <- ToNumber(Second(resp))
       }
    if(Third(resp)==2)
	   {
        down2 <- ToNumber(Second(resp))
       }
    if(Third(resp)==3)
	   {
        down3 <- ToNumber(Second(resp))
       }
    if(Third(resp)==4)
	   {
        down4 <- ToNumber(Second(resp))
       }

    if(Third(resp)==5)
	   {
        down5 <- ToNumber(Second(resp))
       }
    if(Third(resp)==6)
	   {
        down6 <- ToNumber(Second(resp))
       }
    if(Third(resp)==7)
	   {
        down7 <- ToNumber(Second(resp))
       }
    if(Third(resp)==0)
	   {
        down0 <- ToNumber(Second(resp))
       }


	   buttonstate.text <-  "Buttonstate:  [0,1,2,3,4,5,6,7]: " +
	   down0 +","+down1+","+down2+","+down3+","+down4+","+down5+","+down6+","+down7

    Draw()		   
     if(down1+down2+down3+down4 == 4) 
	   {
	      cont <- 0
       }
    }


	lab.text <- "Exiting testing."
    Draw()		   
	Wait(1000)

}



##Some shortcut functions

define ResetCedrusBaseTimer(dev)
{
  SendCedrus(dev,"e1")
}


define ResetCedrusTrialTimer(dev)
{
  SendCedrus(dev,"e5")
}

define Print(text)
{
  gMsg.text <- text + CR(1) + gMsg.text
  Draw()
}

define DisplayEvent(evt)
{

  Print("Event: " + evt)
  if(Second(evt)==1)
   {
      text <- "DOWN"

   } else {

      text <- "UP"
   }

    buttonID <-  ToInteger(Third(evt))  #ButtonID 0 is first,so add 1:
    button <- Nth(gButtons,buttonID+1)

	gIndicator.text <- text
	Move(gIndicator,button.x,button.y)
	Draw()

}

define WaitForCedrusResponse(dev,keys,updown)
{

 printme <- 0
##dev is the name of the cedrus device
## 
## keys is a list of keys to wait for (1..8). It will ignore all others
## updown is the type of event to look for, on each key.  It will
## ignore all others.
##
## keys list can include the same key multiple times, for example to
## look for either down or upclicking.


	cont <- 1
     while(cont)
     {

      val <-ComPortGetByte(dev) 
      if(NumToASCII(val)=="k")
	  {
        tmp <- [val]
        ##Get five more.
 
 	 	tmp <- Merge(tmp,GetCedrusList(dev,5))
		out <- ParseCedrusKey(tmp)

        ## which keys match?
		keymatch <- Match(keys,Third(out))
		subkey <- Filter(keys,keymatch)
		subtype <- Filter(updown,keymatch)

		if(IsMember(Second(out),subtype))
		  {
			cont <- 0
		  } else {
		    if(printme)
			{
              Print("Detecting and discarding Cedrus Event:  " + out)
			}
		  }

	  } 

    }

  return out
}


define GetCedrusTime(dev)
{
  ##This may have trouble if there is anything pending input.
  GetCedrusString(dev) ##flush whatever is in the queue.
  SendCedrus(dev,"e3")
  basetime <- GetCedrusList(dev,6) ##flush whatever is in the queue.
  basetime2 <-  BitsToTimer(SubList(basetime,3,6))
  return basetime2
}



##This sends a command to cedrus, 
##and gets back a string until it only sees 0s.
define SendCedrus(port, string)
{
   list <- SplitString(string,"")

   loop(i,list)
   {
      ComPortSendByte(port,i)
   }

   ##Now, get whatever iscoming.
}


define GetCedrusString(port)
{
   tmp <- ""
 
  

   last <- GetTime()
   cont <- 1
   while(cont)
   {
     out <- ComPortGetByte(port)
     if(out <> -1)
	 {
        tmp <- tmp + NumToASCII(out)
		last <- GetTime()
     }

      Wait(5) 
	  ##Finish if you've waited at least 50 ms since last bit.
	  ##Probably could be -1
	  if(GetTime()-last>50)
	  {
	    cont <- 0
	  }
   }

  return tmp
}


## Specify how many bits you want, 
## starting now, including possibly 0s
##
define GetCedrusList(port,length)
{
   tmp <- []
   ii <- 0
   Wait(50)
   while(ii<length)
   {
     out <- ComPortGetByte(port)
	 if(out <> -1)
	 {
      tmp <- Append(tmp,out)
      ii <- ii + 1
	 }

     Wait(5)

   }

  return tmp
}




define MonitorCedrus(port,time)
{

  done <- GetTime()+time
##This will wait for keypresses plain and simple.

   tmp <- []

   while(GetTime() < done)
   {   
     val <-ComPortGetByte(port) 
     if(NumToASCII(val)=="k")
	  {
        tmp <- [val]
        ##Get five more.
 
 	 	tmp <- Merge(tmp,GetCedrusList(port,5))

#		 press <- (ExtractCedrusKeyPress(Nth(tmp,2)))
		 out <- ParseCedrusKey(tmp)
		 Print(GetTime()-gBaseTime)
		 Print(out)

		 ##extract the keycode too.

         
	  } else {
          if(val <> -1)
          {
        	  Print(val)
		  }
	  }

    }

}


define ParseCedrusKey(keylist)
{
  return Append(ExtractCedrusKeyPress(Second(keylist)),
                BitsToTimer(SubList(keylist,3,6)))
}



##  byte 2: bits 0-3 store port number
##  byte 2: bits 4: action flag.  If set, the button has been pressed;
##  if clear, it has been released.
##  byte 2: bits 5-7 indicate which button was pressed.

define ExtractCedrusKeyPress(bit)
{  

   ##Port is the 'smallest' 4 bits
   port <- Mod(bit,16)
   rem <- (bit-port)/16

   action <- Mod(rem,2)

   rem <- (rem-action)/2
   button <- rem

   return [port,action,button]
}

##Extracts bits from the timer.
define BitsToTimer(list)
{
 return  Nth(list,1) + 256*Nth(list,2) + 65536*Nth(list,3) +    16777216 * Nth(list,4)

}

define NumToASCII(num)
{

letters <- [" ","!",gQuote,"#","$","%","&","'","(",")","*","+",",","-",
            ".","/","0","1","2","3","4","5","6","7","8","9",":",";",
            "<","=",">","?","@","A","B","C","D","E","F","G","H","I",
            "J","K","L","M","N","O","P","Q","R","S","T","U","V","W",
            "X","Y","Z","[","\","]","^","_","`","a","b","c","d","e",
            "f","g","h","i","j","k","l","m","n","o","p","q","r","s",
            "t","u","v","w","x","y","z","{","|","}","~"]


   if(num==13)
   {
      val <-CR(1)
   }elseif(num>=32 and num<=122)
   {
     val <- Nth(letters,num-31)
   } else {
     val <- "["+num+"]"
   }
   
   return val
}
