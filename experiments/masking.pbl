define Start(lPar)
{
 ## (c) 2004 Shane T. Mueller
 ## stmuelle@indiana.edu
 ## x0407

  #Get (assign) subject number
  if(IsList(lPar))
     {
	    gSubNum   <- First(lPar)
	  } else  {
       gSubNum <- 0
    }

  #Set the stimulus presentation time here:
  gStimTime <- 95

  #
  gNumCorrect <- 0

  #results are stored in tmpresults.dat
  gResultsFile <-FileOpenAppend("results-" + gSubNum +".txt")


    RandomizeTimer()
  ##Initialize Window, etc.
  gWindow <- MakeWindow("black")   

   ##Get rid of cursor.	    
   ShowCursor(0)

  ##Initialize Font and colors

   bg <- MakeColor("black")
   fg <- MakeColor("white")
 
   gInstructionsFont <-MakeFont("Vera.ttf",0,16,fg,bg,1)  
   gFontStim  <- MakeFont("Vera.ttf", 0,16,fg,bg,1)	 
   gFontReverse<- MakeFont("Vera.ttf", 0,16,bg,fg,1)	 
   gFontMask  <- MakeFont("Vera.ttf", 0,16,fg,bg,1)	 
   gFixation  <- MakeLabel("+",gInstructionsFont)				 

   masks      <- [[1,")()(", ")()("],
   		          [2,")[)[", "[)[)"],
				  [3,")])]", "])])"],
				  [4,"([([", "[([("],
				  [5,"(](]", "](]("],
 		          [6,"][][", "[][]"]]

   stimuli <- [")","(","]","["]
   stimPairs <-CrossFactorWithoutDuplicates(stimuli)
   #Pair all stimuli with all masks
   stimMask1 <- (DesignFullCounterbalance(stimPairs, masks)) 
   #duplicate it
   stimMask2 <- Transpose(RepeatList(stimMask1,2))
   longshort <- Merge(Repeat("L",Length(stimMask1)), 
Repeat("S",Length(stimMask1)))
  
   
   stimMask <- Shuffle(Transpose([First(stimMask2), 
Nth(stimMask2,2),longshort]))
    
   numtrials<-Length(stimMask)

   gInstructions <- MakeLabel("Use left and right shift buttons to indicate stimulus. Press any key to begin",gInstructionsFont)
   AddObject(gInstructions, gWindow)
   Move(gInstructions, 320, 200)
   Show(gInstructions)
   Draw()  
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()
   Wait(2000)

   trial <- 1
    loop(stim, stimMask)
    {

         FilePrint_(gResultsFile,gSubNum + " " + trial + " ")
          Trial(stim)
         if(Mod(trial, 24)==0)
         {
          SetText(gInstructions,"Trial [" + trial + "] of [" + numtrials + "]. Acc: ["+ Round(gNumCorrect/trial*100) + "%]")
          Show(gInstructions)
			 Draw()
			 WaitForAnyKeyPress()
			 Hide(gInstructions)
         }
          trial <- trial + 1
    }
     FileClose(gResultsFile)
 }


define Trial(stimulus)
{

 ##stimulus is a list of three things. The first is
 ##the target/foil combo, the second is the mask.
 ##Third determines if the mask should be long or short


  tf  <-  First(stimulus)
  mask <- Nth(stimulus,2)
  longshort <- Nth(stimulus,3)
 
  if(longshort == "L") 
    {
       maskdelay <- 500
       blankdelay <- 50
    } else {
       maskdelay <- 80
       blankdelay <- 470
    }

  target <- First(tf)
  foil   <- Nth(tf,2)

  masks <- Shuffle([Nth(mask,2),Nth(mask,3)])
  #pre/post masks are different--select randomly

  preMask <- MakeLabel(First(masks),gFontStim)
  postMask <- MakeLabel(Nth(masks,2),gFontStim)

  stimLabel <- MakeLabel(target, gFontStim)  ##Make stimulus label
  choiceOrder<-RandomDiscrete(2)

  ##Print out some info about the composition of the trial
   FilePrint_(gResultsFile, target + " " + foil  + " ")
   FilePrint_(gResultsFile, First(mask) + " " + First(masks) + " " + longshort + " ")
   FilePrint_(gResultsFile,  choiceOrder + " ")
   
  targetLabel <- MakeLabel(target, gFontStim)
  foilLabel   <- MakeLabel(foil, gFontStim)
  postpostMask<- MakeLabel("    ",gFontReverse)

  ##Add labels to window
  AddObject(stimLabel,gWindow)	
  AddObject(gFixation, gWindow)
  AddObject(preMask, gWindow)
  AddObject(postMask, gWindow)
  AddObject(postpostMask,gWindow)
  AddObject(targetLabel,gWindow)
  AddObject(foilLabel,gWindow)

  if(choiceOrder == 1)
  {
     Move(targetLabel,290,200)
     Move(foilLabel,350,200)
      

  } else {
 
     Move(targetLabel,350,200)
     Move(foilLabel,290,200)
   }


  ##Move text to center
  Move(stimLabel, 320,200)
  Move(gFixation, 320,200)
  Move(preMask, 320,200)
  Move(postMask, 320,200)
  Move(postpostMask, 320,200)
  

  ##Hide the text; show the fixation
  Hide(stimLabel)
  Hide(targetLabel)
  Hide(foilLabel)
  Hide(preMask)
  Hide(postMask)
  Hide(postpostMask)
  Show(gFixation)
  Draw(gWindow)


  #Wait some time and hide the fixation
  Hide(gFixation) #pre-hide
  Wait(400) #Draw the fixation cross
  Draw()

  #Show(preMask)   #pre-draw  #Wait the delay.
  #Show(postMask)   #pre-draw  #Wait the delay.
  DrawUntil(blankdelay)
  Draw()
 

   #Hide(preMask)   #pre-undraw the mask
   #Hide(postMask)   #pre-undraw the mask
	DrawUntil(maskdelay)  
   Show(stimLabel) #draw the stimulus
   t1<- GetTime()

   DrawUntil(gStimTime)   #Wait the stimulus duration time
   t2<- GetTime()
   Hide(stimLabel) #pre-hide the stimulus
   Show(postMask)  #pre-draw the postmask

   Draw()

   FilePrint_(gResultsFile,( t2 - t1)+ " ")

   #Show the post-mask and wait the proper time.
   Hide(postMask)	#pre-hide the mask
	Show(postpostMask)
   Wait(maskdelay)
   Draw()

   #wait a little before showing the choices
   Wait(300+blankdelay)
	Hide(postpostMask)
   Show(targetLabel)
   Show(foilLabel)
   Draw()
   start <- GetTime()


  #Wait for response,
  response <-WaitForListKeyPress(["<lshift>","<rshift>"])
  

  #Get the response time.
  end <- GetTime()


  if(choiceOrder == 1) 
   {
      if(Uppercase(response) == "<lshift>")
      { 
         correct <- 1
      } else {
         correct <- 0
      }

   } else {
      if(Uppercase(response) == "<lshift>")
      { 
         correct <- 0
      } else {
         correct <- 1
      }

    }

  gNumCorrect <- gNumCorrect+correct

  Hide(targetLabel)
  Hide(foilLabel)
  if(correct)
   {
     SetText(gInstructions,"Correct")
   }  else {
     SetText(gInstructions,"Incorrect")
   }
  Show(gInstructions)  
  Draw()
  Wait(500)
  Hide(gInstructions)
  Draw()
 # print the actual display time and the response.
  FilePrint(gResultsFile, (end-start) + " " + response + " "+ correct)
  Wait(500)
  RemoveObject(stimLabel,gWindow)
  RemoveObject(targetLabel, gWindow)
  RemoveObject(foilLabel, gWindow)
  RemoveObject(gFixation, gWindow)
  RemoveObject(preMask, gWindow)
  RemoveObject(postMask, gWindow)
  RemoveObject(postpostMask, gWindow)
 
  return (end - start)
} 


define DrawUntil(timeout)
{

  end <- GetTime() + timeout
  while(GetTime() < end)
  {
    Draw()
  }
}
